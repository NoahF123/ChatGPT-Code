#include <iostream>
#include <vector>
#include <string>

using namespace std;

const int MAZE_WIDTH = 10;
const int MAZE_HEIGHT = 10;

// Represents the state of a cell in the maze
enum CellState {
  EMPTY,
  WALL,
  PLAYER,
  END
};

// Represents a cell in the maze
struct Cell {
  CellState state;
  int row;
  int col;
};

// Represents the maze game
class MazeGame {
private:
  vector<vector<Cell>> maze;
  int playerRow;
  int playerCol;
  int lives;
  int level;

public:
  // Constructor
  MazeGame() {
    // Initialize the maze with empty cells
    maze = vector<vector<Cell>>(MAZE_HEIGHT, vector<Cell>(MAZE_WIDTH));
    for (int row = 0; row < MAZE_HEIGHT; row++) {
      for (int col = 0; col < MAZE_WIDTH; col++) {
        maze[row][col] = {EMPTY, row, col};
      }
    }

    // Initialize the player's starting position
    playerRow = 0;
    playerCol = 0;
    maze[playerRow][playerCol].state = PLAYER;

    // Initialize the number of lives and the starting level
    lives = 3;
    level = 1;
  }

  // Moves the player in the specified direction
  void movePlayer(int drow, int dcol) {
    // Check if the move is valid
    if (playerRow + drow >= 0 && playerRow + drow < MAZE_HEIGHT &&
        playerCol + dcol >= 0 && playerCol + dcol < MAZE_WIDTH &&
        maze[playerRow + drow][playerCol + dcol].state != WALL) {
      // Update the player's position
      maze[playerRow][playerCol].state = EMPTY;
      playerRow += drow;
      playerCol += dcol;
      maze[playerRow][playerCol].state = PLAYER;

      // Check if the player has reached the end
      if (maze[playerRow][playerCol].state == END) {
        // Move to the next level
        level++;
        resetMaze();
      }
    } else {
      // If the move is not valid, the player loses a life
      lives--;
    }
  }

  // Resets the maze to the starting state for the current level
  void resetMaze() {
    // Clear the current maze
    for (int row = 0; row < MAZE_HEIGHT; row++) {
      for (int col = 0; col < MAZE_WIDTH; col++) {
        maze[row][col] = {EMPTY, row, col};
      }
    }

    // Set the player's starting position
    playerRow = 0;
    playerCol = 0;
    maze[playerRow][playerCol].state = PLAYER;

    // Set the end position
    int endRow = MAZE_HE
